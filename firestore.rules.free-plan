rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // For the free plan, we need to implement card limit checks directly in rules
    function canCreateCard(userId) {
      let userData = getUserData(userId);
      let cardLimit = userData != null && "cardLimit" in userData ? userData.cardLimit : 2; // Default limit is 2
      let cardsCreated = userData != null && "cardsCreated" in userData ? userData.cardsCreated : 0;
      return cardsCreated < cardLimit;
    }
    
    function getCardCount(userId) {
      let userData = getUserData(userId);
      return userData != null && "cardsCreated" in userData ? userData.cardsCreated : 0;
    }
    
    // Cards collection rules
    match /cards/{cardId} {
      // Allow read access for active cards to anyone
      allow read: if resource == null || resource.data.active == true;
      
      // Allow read access for user's own cards regardless of active status
      allow read: if resource != null && isOwner(resource.data.userId);
      
      // Allow create for authenticated users if they haven't reached their limit
      // Since we don't have Cloud Functions, we need more robust rules
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    canCreateCard(request.auth.uid) &&
                    // Ensure required fields are present
                    "firstName" in request.resource.data &&
                    "lastName" in request.resource.data;
      
      // Allow update for user's own cards
      allow update: if resource != null && 
                      isOwner(resource.data.userId) && 
                      // Ensure userId doesn't change
                      request.resource.data.userId == resource.data.userId;
                      
      // Allow delete for user's own cards
      allow delete: if resource != null && isOwner(resource.data.userId);
    }
    
    // User data rules
    match /users/{userId} {
      // Users can read their own data
      allow read: if isOwner(userId);
      
      // Users can create their own profile
      allow create: if isOwner(userId);
      
      // Users can update their own profile but cannot change the card limit
      allow update: if isOwner(userId) && 
                     (!("cardLimit" in request.resource.data) || 
                      request.resource.data.cardLimit == resource.data.cardLimit) &&
                     // For free plan, we need to handle card count update
                     (
                       // Increment cards created when creating a new card
                       !("cardsCreated" in request.resource.data) || 
                       request.resource.data.cardsCreated == resource.data.cardsCreated || 
                       request.resource.data.cardsCreated == resource.data.cardsCreated + 1
                     );
    }
    
    // Admin collection for configuring global settings
    match /admin/{document=**} {
      // Only admins can read/write admin data (not used in free plan)
      allow read, write: if false;
    }
    
    // User status for tracking online presence
    match /userStatus/{userId} {
      // Anyone can read user status
      allow read: if true;
      
      // Users can update their own status
      allow write: if isOwner(userId);
    }
    
    // Card statistics
    match /cardStats/{cardId} {
      // Allow reading card stats
      allow read: if true;
      
      // Only allow writes from authenticated users
      allow create: if isAuthenticated() &&
                      // Must reference a valid card that the user owns
                      exists(/databases/$(database)/documents/cards/$(cardId)) &&
                      isOwner(get(/databases/$(database)/documents/cards/$(cardId)).data.userId);
                      
      // Allow updates to existing stats 
      allow update: if isAuthenticated() &&
                      exists(/databases/$(database)/documents/cards/$(cardId)) &&
                      isOwner(get(/databases/$(database)/documents/cards/$(cardId)).data.userId);
    }
    
    // Card views for analytics
    match /cardViews/{viewId} {
      // Allow creation of view analytics
      allow create: if true;
      
      // Only allow reads from card owner
      allow read: if isAuthenticated() && 
                    exists(/databases/$(database)/documents/cards/$(resource.data.cardId)) && 
                    isOwner(get(/databases/$(database)/documents/cards/$(resource.data.cardId)).data.userId);
    }
    
    // Card activities for tracking user interactions
    match /cardActivities/{activityId} {
      // Users can record their own activities
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Users can only read their own activities
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}
